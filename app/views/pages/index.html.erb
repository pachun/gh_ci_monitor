<!DOCTYPE html>
<html>
  <head>
    <title>CI Monitor</title>
    <%= action_cable_meta_tag %>
    <%= javascript_include_tag "actioncable" %>
    <style>
      html, body {
        margin: 0;
        padding: 0;
        background: #000;
        color: #fff;
        font-family: sans-serif;
        height: 100%;
        width: 100%;
        overflow: hidden;
      }

      #repos {
        display: flex;
        flex-direction: row;
        width: 100vw;
        height: 100vh;
      }

      .repo {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        transition: background-color 0.3s;
      }

      .repo-name {
        font-size: 4vw;
        font-weight: bold;
        margin-bottom: 1rem;
      }

      .repo-link {
        font-size: 2.5vw;
        color: #ccc;
        text-decoration: underline;
      }

      .bg-running {
        background-color: #665c00; /* dark yellow */
      }

      .bg-success {
        background-color: #004d1a; /* dark green */
      }

      .bg-failure {
        background-color: #4d0000; /* dark red */
      }

      #placeholder {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 3vw;
        color: #666;
        text-align: center;
      }
    </style>
  </head>
  <body>
    <div id="placeholder">WAITING FOR BUILD…</div>
    <div id="repos"></div>

    <script>
      const placeholderEl = document.getElementById("placeholder");
      const cable = ActionCable.createConsumer();
      const reposEl = document.getElementById("repos");
      const repoElements = {};
      const repoTimers = {};

      function getStatusClass(status, conclusion) {
        if (status === "in_progress" || status === "queued") return "bg-running";
        if (conclusion === "success") return "bg-success";
        if (conclusion === "failure") return "bg-failure";
        return "bg-running";
      }

      function extractCommitTitle(message) {
        return message.split("\n")[0];
      }

      function formatDuration(seconds) {
        const h = Math.floor(seconds / 3600).toString().padStart(2, "0");
        const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, "0");
        const s = Math.floor(seconds % 60).toString().padStart(2, "0");
        return `${h}:${m}:${s}`;
      }

      function updateTimer(repoKey, startTime, targetEl) {
        if (!repoTimers[repoKey]) {
          repoTimers[repoKey] = {}; // ← initialize first
        }

        if (repoTimers[repoKey].interval) {
          clearInterval(repoTimers[repoKey].interval);
        }

        repoTimers[repoKey].interval = setInterval(() => {
          const now = new Date();
          const elapsed = (now - startTime) / 1000;

          const base = formatDuration(elapsed);
          const comparison = repoTimers[repoKey].lastSuccessDuration
            ? ` / ${formatDuration(repoTimers[repoKey].lastSuccessDuration)}`
            : "";

          targetEl.textContent = `⏰ ${base}${comparison}`;
        }, 1000);
      }

      function updateRepoView(data) {
        if (placeholderEl) {
          placeholderEl.remove();
        }

        const {
          repo,
          url,
          status,
          conclusion,
          commit,
          created_at,
          updated_at
        } = data;

        const cssClass = getStatusClass(status, conclusion);
        const commitTitle = extractCommitTitle(commit);
        const shortRepoName = repo.split("/")[1];

        let el = repoElements[repo];

        if (!el) {
          el = document.createElement("div");
          el.className = `repo ${cssClass}`;
          el.innerHTML = `
            <div class="repo-name">${shortRepoName}</div>
            <a class="commit-title repo-link" href="${url}" target="_blank">${commitTitle}</a>
            <div class="duration-label" style="margin-top: 1rem; font-size: 2.5vw;"></div>
          `;
          reposEl.appendChild(el);
          repoElements[repo] = el;
        } else {
          el.className = `repo ${cssClass}`;
          el.querySelector(".commit-title").href = url;
          el.querySelector(".commit-title").textContent = commitTitle;
        }

        const durationEl = el.querySelector(".duration-label");

        if (status === "completed") {
          if (repoTimers[repo]?.interval) {
            clearInterval(repoTimers[repo].interval);
            delete repoTimers[repo].interval;
          }

          if (conclusion === "success") {
            const start = new Date(created_at);
            const end = new Date(updated_at);
            const duration = (end - start) / 1000;
            if (!repoTimers[repo]) {
              repoTimers[repo] = {};
            }
            repoTimers[repo].lastSuccessDuration = duration;
          }

          durationEl.textContent = "";
        }

        if (status === "in_progress" || status === "queued") {
          const startedAt = new Date(created_at);
          updateTimer(repo, startedAt, durationEl);
        }
      }

      cable.subscriptions.create("CiChannel", {
        received(data) {
          updateRepoView(data);
        }
      });
    </script>
  </body>
</html>
